1) На основе пройденного материала о классах объяснить структуру программы на Java.
2) Объяснить, как мы вводили строки с помощью Scanner. System.in предоставляет неудобный интерфейс ввода, посимвольно.
3) Integer.parseInt выбросил исключение. Зачем? Чтобы дать знать, что что-то не так. Предпочтительный способ "давать знать". Возврат кода ошибки - не всегда и не везде. 

4) Выделим в метод и обернем его в try-catch (Ctrl + Alt + T). В блоке catch мы можем исключение проглотить, обработать, перевыбросить или выбросить новое.

- проглотить - ничего не делать, может, кроме логирования
- обработать - логировать или предусмотреть в логике решение этой ситуации
- перевыбросить - throw e - переложить вопрос решения проблемы на уровень выше, так как необработанное исключение распостраняется выше по стеку вызовов. Обернуть getNumber в try-catch и показать, что исключение ловится там.
- можно создавать отдельно и выбрасывать отдельно

5) Для того, чтобы выбросить новое, нужно знать, какое я хочу выбросить - или существующее, или новое;

6) Создадим новое - MainException. Создался класс, наследник Throwable. Если мы будем пытаться его бросать, то код не скомпилится. Я должен либо его ловить самому, либо указать, что метод выбрасывает исключения данного типа. Это т.н. checked исключения - те, которые требуют, чтобы код "знал" о их существовании. Спорная концепция, которая сознательно не внедрена в C# и которую в современных библиотеках чаще избегают (Spring). Checked exceptions плохи тем, что они заставляют программиста написать try-catch там, где иногда нельзя предусмотреть внятный механизм восстановления (мало инфы, низкий уровень и пр.) или явно пробрасывать исключение на верхние уровни, портя сигнатуры методов.

7) Если отнаследовать MainException от RuntimeException, то это - unchecked exceptions.

8) Блоки catch можно повторять, указывая другое исключение. Обратите внимание, что порядок - от частного к общему. Кроме того, нельзя в фильтре указать checked исключение, которое явным образом не выбрасывается в try блоке.

9) Кроме блока catch существует еще один блок - finally, он выполняется всегда, даже если есть ошибка. Его назначение - корректное освобождение ресурсов.