1) Используя примитивные логический объект можно представить в виде группы разрозненных переменных разных типов, объединенных только местом объявления.

int age;
boolean isMarried;
String name;

2) Было-бы очень удобно уметь объявлять в языке "сложные" переменные, которые состоят из нескольких простых переменных. Развитие этой идеи привело к ОО парадигме программирования.

3) Объявление любой переменной начинается с типа, который характеризует размер переменной, ее содержимое, доступные операции и пр. Значит, для того, чтобы уметь объявлять "сложные" переменные, нужно уметь создавать "сложные" типы. Сложные - в отличие от примитивных, которые уже доступны в самом языке. Каждый сложный тип может иметь несколько атрибутов, каждый из которых будет выражен через свою переменную.

4) Такие сложные типы называются классами. Пример объявления класса

class Person {
	int age;
	boolean isMarried;
	String name;
}

переменные внутри класса называются полями класса.

5) Имея теперь этот новый "сложный" или комплексный или user defined тип, можно создавать переменные этого типа.

Person p, p1;

6) Классы, как и массивы, являются ссылочными типами, а значит, одного объявления переменной типа класс не достаточно - нужно создать сам объект. Зачем это нужно? Дело в том, что в отличие от примитивных типов, размер которых известен заранее, размер массива или класса не определен точно - он всегда меняется. Поэтому объявляют сначала переменную типа класс (или массив), а потом создают так называемый объект - экземпляр класса.

p = new Person();
p1 = new Person();

оператор new выделяет память под все поля класса + служебная инфа., то есть размер объекта = сумме размеров его полей + некая служебная информация.

7) Работа с объектами. Доступ к полям. Модификаторы доступа. Getter and Setter.

8) Предпосылки для инкапсуляции кода внутрь класса. Методы. Person.sayHello. Access qualifiers. Объекты реальной жизни имеют не только атрибуты - также и поведение. 

9) Конструирование объекта - не только p = new Person(); p.age = 89; и т.д. Конструктор - спец. метод, совпадающий по названию с именнем класса, предназначен для инициализации объекта. Дефолтный конструктор. Показать, что есть public Person(), который мы не создавали, компилятор его добавляет автоматически.

10) Наследование. Объекты реальной жизни часто относятся друг ко другу как IS-A. Если мне нужно иметь другой объект, у которого кроме атрибутов Person есть еще несколько новых, то мне не обязательно создавать новый класс - достаточно отнаследовать от существующего. Private, Protected. 

class Student extends Person{
	int course;	
} 